import RPi.GPIO as GPIO # RPi.GPIO can be referred as GPIO from now
import time
 
ledPin = 22    # pin22
 
def setup():
        GPIO.setmode(GPIO.BOARD)       
        GPIO.setup(ledPin, GPIO.OUT)   
        GPIO.output(ledPin, GPIO.LOW)  
def loop():
        while True:
                print 'LED on'
                GPIO.output(ledPin, GPIO.HIGH)   
                time.sleep(1.0)                  
                print 'LED off'
                GPIO.output(ledPin, GPIO.LOW)   
                time.sleep(1.0)                 
def endprogram():
 
        GPIO.output(ledPin, GPIO.LOW)    
        GPIO.cleanup()                   
 
if __name__ == '__main__':         
        setup()
        try:
                loop()
        except KeyboardInterrupt: 
                endprogram()

public sealed partial class MainPage : Page
{
    private IList<GpioPin> _pins = new List<GpioPin>();
 
    public MainPage()
    {
        InitializeComponent();
 
        Loaded += MainPage_Loaded;
    }
 
    private void MainPage_Loaded(object sender, RoutedEventArgs e)
    {
        Init();

        foreach (var pin in _pins)
        {
            pin.Write(GpioPinValue.High);
        }

        Task.Delay(10000).Wait();

        Stop();
    }

    private void Init()
    {
        var gpio = GpioController.GetDefault();
 
        if (gpio == null)
        {
            Debug.WriteLine("GPIO controller is missing!");
            return;
        }
 
        _pins.Add(gpio.OpenPin(17));
        _pins.Add(gpio.OpenPin(18));
        _pins.Add(gpio.OpenPin(27));
 
        foreach (var pin in _pins)
        {
            pin.Write(GpioPinValue.Low);
            pin.SetDriveMode(GpioPinDriveMode.Output);
        }
    }

    private void Stop()
    {
        foreach (var pin in _pins)
        {
            pin.Write(GpioPinValue.Low);
        }
    }
}

